import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
        springBootVersion = '1.3.0.RC1'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "phantomJs"]

    ext {
        chromeDriverVersion = '2.19'
        phantomJsVersion = '1.9.7'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply from: "gradle/osSpecificDownloads.gradle"

defaultTasks 'build'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

jar {
    baseName = 'spring-boot-bdd'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework:spring-tx:4.2.2.RELEASE')

    compile('org.projectlombok:lombok:1.16.6')
    compile('com.google.guava:guava:18.0')

    testCompile('junit:junit:4.12')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('info.cukes:cucumber-java8:1.2.4',
                'info.cukes:cucumber-junit:1.2.4',
                'info.cukes:cucumber-spring:1.2.4')
    testCompile('org.fluentlenium:fluentlenium-core:0.10.6')
    testCompile('com.codeborne:phantomjsdriver:1.2.1')
}


test {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}



checkstyle {
    toolVersion = '6.12'
}

checkstyleMain {
    doLast {
        ant.xslt(in: "$buildDir/reports/checkstyle/main.xml",
                style: "config/checkstyle/checkstyle.xsl",
                out: "$buildDir/reports/checkstyle/checkstyle.html"
        )
    }
}

checkstyleTest {
    ignoreFailures = true
}

task checkstyleReport << {
}

jacoco {
    toolVersion = '0.7.5.201505241946'
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}
